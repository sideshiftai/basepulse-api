/**
 * Application-specific types for BasePulse API
 */

import { Address } from 'viem';
import { ShiftStatus, ShiftType } from './sideshift.types';

export type ShiftPurpose = 'fund_poll' | 'claim_reward';

export interface StoredShift {
  id: string;                    // Unique ID (generated by us)
  sideshiftOrderId: string;      // Sideshift order ID
  pollId: string;                // Poll ID from smart contract
  userAddress: Address;          // User's wallet address
  purpose: ShiftPurpose;         // What this shift is for

  // Shift details
  sourceAsset: string;           // e.g., "BTC"
  destAsset: string;             // e.g., "ETH"
  sourceNetwork: string;         // e.g., "bitcoin"
  destNetwork: string;           // e.g., "ethereum"
  sourceAmount?: string;         // Amount to convert (for fixed)
  destAmount?: string;           // Expected receive amount

  // Sideshift data
  depositAddress: string;        // Where to send funds
  settleAddress: string;         // Where to receive funds
  shiftType: ShiftType;          // 'fixed' | 'variable'
  status: ShiftStatus;           // Current status

  // Transaction hashes
  depositTxHash?: string;        // Deposit transaction hash
  settleTxHash?: string;         // Settlement transaction hash

  // Contract interaction
  contractTxHash?: string;       // Our contract call hash (withdrawFunds)

  // Timestamps
  createdAt: Date;
  updatedAt: Date;
  completedAt?: Date;
  expiresAt: Date;
}

export interface CreateShiftRequest {
  pollId: string;
  userAddress: Address;
  purpose: ShiftPurpose;
  sourceCoin: string;
  destCoin: string;
  sourceNetwork?: string;
  destNetwork?: string;
  sourceAmount?: string;         // For fixed shifts
  refundAddress?: Address;       // Optional refund address
}

export interface ShiftStatusResponse {
  shift: StoredShift;
  sideshiftData?: any;           // Raw Sideshift API response
}

export interface SupportedAssetsResponse {
  assets: Array<{
    coin: string;
    name: string;
    networks: string[];
  }>;
  lastUpdated: Date;
}

// Database/Storage interface
export interface ShiftStorage {
  create(shift: Omit<StoredShift, 'id' | 'createdAt' | 'updatedAt'>): Promise<StoredShift>;
  getById(id: string): Promise<StoredShift | null>;
  getBySideshiftOrderId(orderId: string): Promise<StoredShift | null>;
  getByPollId(pollId: string): Promise<StoredShift[]>;
  getByUserAddress(address: Address): Promise<StoredShift[]>;
  update(id: string, updates: Partial<StoredShift>): Promise<StoredShift>;
  delete(id: string): Promise<boolean>;
}
